# # This file contains the fastlane.tools configuration
# # You can find the documentation at https://docs.fastlane.tools
# #
# # For a list of all available actions, check out
# #
# #     https://docs.fastlane.tools/actions
# #
# # For a list of all available plugins, check out
# #
# #     https://docs.fastlane.tools/plugins/available-plugins
# #

# # Uncomment the line if you want fastlane to automatically update itself
# # update_fastlane

# default_platform(:android)

# platform :android do
#   desc "Runs all the tests"
#   lane :test do
#     gradle(task: "test")
#   end

#   desc "Submit a new Beta Build to Crashlytics Beta"
#   lane :beta do
#     gradle(task: "clean assembleRelease")
#     crashlytics
  
#     # sh "your_script.sh"
#     # You can also use other beta testing services here
#   end

#   desc "Deploy a new version to the Google Play"
#   lane :deploy do
#     gradle(task: "clean assembleRelease")
#     upload_to_play_store
#   end
# end
# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Play Store"
  lane :beta do
    # Prompt the user for signing store and alias key passwords
    store_password = prompt(text: "Signing Store Password: ", secure_text: true)
    key_password = prompt(text: "Alias Key Password: ", secure_text: true)

    # Path to the signing key
    releaseFilePath = File.join(Dir.pwd, "my-release-key.keystore")

    # Clean and build the app, injecting signing configuration at runtime
    gradle(task: 'clean')
    gradle(
      task: 'assemble',
      build_type: 'Release',
      properties: {
        "android.injected.signing.store.file" => releaseFilePath,
        "android.injected.signing.store.password" => store_password,
        "android.injected.signing.key.alias" => "my-key-alias",
        "android.injected.signing.key.password" => key_password
      }
    )

    # Upload the APK to the Play Store (internal testing)
    upload_to_play_store(
      track: 'internal'
    )
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end
